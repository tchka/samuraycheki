[
  {
    "title": "Обновление Angular Language Service для Visual Studio",
    "slug": "angular",
    "category": "Разработка",
    "tags": [
      "Программирование",
      "Хранение данных",
      "Обработка изображений"
    ],
    "poster": "posters/angular.png",
    "author": "john",
    "short_desc": "В августе прошлого года команда инструментов JavaScript/TypeScript выпустила Angular Language Service для пользователей Visual Studio. Этим мы хотели обратиться ко многим пользователям ASP.NET/ASP.NET Core, которые создают свои клиентские проекты с помощью Angular. Хотя это расширение вызвало много хвалебных отзывов, не для всех пользователей оно было таким удобным. Мы хотим, чтобы вы знали, что мы вас услышали и внесли некоторые изменения. Немного подробностей под катом.",
    "text": "Обновления и исправления\nМы постоянно отслеживали проблемы на нашем Github и отслеживали обратную связь с сайта Visual Extension, чтобы увидеть, какие ошибки необходимо расставить по приоритету и какие функции необходимо добавить. В этом обновлении мы решили две основные проблемы:\n\nСистемное совокупное исключение (System Aggregate Exception), вызванное расширением\n\nHTML-завершения (Completions): неправильная работа\n\nМы также обновили расширение для поддержки последней версии языковой службы (v11.2.8) и последней версии TypeScript (v4.2.3).\n\nПредстоящее исправление, над которым мы сейчас работаем, заключается в том, чтобы обеспечить правильную обработку завершения в буферах проекта с помощью расширения. Вы можете прочитать подробности здесь.\n\nПопробуйте новую версию\nЕсли вы не пробовали расширение Angular Language Service и хотите узнать о нем больше, вы можете прочитать об этом здесь.\n\nГотовы попробовать новую версию сейчас и ищете страницу загрузки расширения? Все это здесь.\n\nПродолжайте отправлять все запросы и сообщения об ошибках в наш репозиторий Github. Вы также можете продолжать оставлять отзывы в комментариях на странице расширения.",
    "status": "AP"
  },
  {
    "title": "Администрирование Informatica PowerCenter в деталях",
    "slug": "informatica",
    "category": "Разработка",
    "tags": [
      "Обработка изображений",
      "Высокая производительность",
      "Информационная безопасность"
    ],
    "poster": "posters/informatica.png",
    "author": "alex",
    "short_desc": "Привет! Меня зовут Баранов Владимир, и я уже несколько лет администрирую Informatica в «Альфа-Банк». В статье я поделюсь опытом работы с Informatica PowerCenter. IPC это платформа, которая занимается ETL (Extract, Transformation, Loading). Я сосредоточусь на описании конкретных кейсов и решений, расскажу о некоторых тонкостях и постараюсь дать пищу для ума.\n",
    "text": "В работе приходится часто сталкиваться с проблемами производительности и стабильности платформы, при этом глубоко во всё вникая, поэтому лично я при работе с Informatica получаю огромное удовольствие. Во-первых, потому, что даже IPC сам по себе не такой уж маленький, а у Informatica целое семейство продуктов. Во-вторых, ETL находится на стыке разных систем, надо знать всего понемногу – базы данных, коннекторы, линукс, скриптовые языки и системы визуализации и мониторинга. В-третьих, это общение с большим количеством разных людей и много интересных задач.\n\nЗапуск клиента информатики\n\nЗабавно, но даже тут можно наступить на некоторые грабли. Да, прямо на старте и с размахом.\n\nУ информатики есть следующие клиенты: Workflow Manager, Workflow Monitor, Repository Manager, Designer и Developer Client. Параметры подключения к репозиториям хранятся в файле domains.infa, который обычно задаётся переменной окружения:\n\nSET INFA_DOMAINS_FILE=C:\\Informatica\\9.5.1\\clients\\PowerCenterClient\\domains.infa\n\nНо если версий информатики несколько, то файл рано или поздно будет «побит», а клиент информатики будет ругаться при попытке сохранения добавленного репозитория.\n\nЧто делать? Создать батники для каждой версии клиента вида:\n\nSET INFA_DOMAINS_FILE=C:\\Informatica\\9.5.1\\clients\\PowerCenterClient\\domains.infa\ncd C:\\Informatica\\9.5.1\\clients\\PowerCenterClient\\client\\bin\\\nstart pmdesign.exe\n\nПоследние две строчки попортили мне очень много крови, так как изначально я запускал клиента так:\n\nC:\\Informatica\\9.5.1\\clients\\PowerCenterClient\\client\\bin\\pmdesign.exe\n\nИ батник прекрасно работал ровно до того момента, пока я не обновился с 9.5.1 до 10.1.1 и не начал пытаться подключаться через клиент информатики к SAP.\n\nDisigner должен был показывать коннекты из файла sapnwrfc.ini, но показывалась пустота, хотя файл лежал в нужном каталоге клиента IPC. Я даже успел немного посидеть с отладчиком над клиентом, но в итоге мне помогла индианка из службы поддержки.\n\nЧто ещё можно сказать о файле domains.infa и создании подключений? Вы не сможете единовременно добавить два репозитория с одинаковым именем, даже если они находятся на разных серверах.\n\nФайл domains.infa также используется при использовании консольных команд для подключения к репозиторию* (pmrep), имейте это в виду. Но об этом чуть позже.\n*На самом деле не обязательно, смотрите на описание ключей команды.\n\nНастраиваем окружение\n\nЧто важного может быть в окружении Informatica? Если вы обратитесь в поддержку Информатики, то первым делом вас попросят показать вывод команд: ulimit –Ha / ulimit –Sa. Soft и hard ограничения пользователя, под которым запущена информатика).\n\nstack size 10240\nopen files (-n) 500000\n\nСколько ставить open files? Поддержка Informatica как-то утверждала, что у нас одна из самых высоконагруженных и сложных инсталляций в России – при этом нам хватает 500к open files, с запасом примерно в 150-250к.\n\nНа многих серверах стоит по 120-180к, и этого хватает. Со временем (и в случае нашего банка это происходит очень быстро) приходится увеличивать.\n\nОднажды видел, как ведёт себя Oracle, если ему не хватает максимально открытых файлов. Он периодически начинает ощутимо тормозить, клиенты от него отваливаются. Но при этом он оставался работать и не падал.\n\nЕсли вы не знаете, какое текущее значение у уже запущенного процесса:\n\ncat /proc/pid/limits\nmax user processes (-u) 4134885\n\nВажный параметр, но ничего особенно интересного про него рассказать не могу.\n\ncore file size (blocks, -c)\n\nПотенциально опасный параметр. Дампы памяти от падаюших сервисов или потоков можно проанализировать (иногда помогает поиск по ключевым словам в базе знаний информатики), их также требует поддержка Informatica. По умолчанию они будут падать в $INFA_HOME/server/bin/ и главное — core могут быть очень большими.\n\nИмеет смысл следить за этим каталогом и аккуратно его чистить.\n\nТеперь не такое очевидное:\n\n/etc/systemd/system.conf, /etc/systemd/user.conf\nDefaultTasksMax=40000\nDefaultLimitNOFILE=500000\n\nБолее подробно о TasksMax:\nTo control the default TasksMax= setting for services and scopes running on the system, use the system.conf setting DefaultTasksMax=. This setting defaults to 512, which means services that are not explicitly configured otherwise will only be able to create 512 processes or threads at maximum.\nFor thread- or process-heavy services, you may need to set a higher TasksMax value. In such cases, set TasksMax directly in the specific unit files. Either choose a numeric value or even infinity.\nSimilarly, you can limit the total number of processes or tasks each user can own concurrently. To do so, use the logind.conf setting UserTasksMax (the default is 12288).\n\nКак можно посмотреть текущее значение:\n\nadmin@serv:/etc/systemd> systemd-analyze dump|grep -i DefaultLimitNPROC|sort -n -k2\nadmin@serv:/etc/systemd> systemctl show -p DefaultLimitNOFILE\nadmin@serv:/proc/38757> systemctl show -p DefaultLimitNPROC\ncat /sys/fs/cgroup/pids/user.slice/user-*.slice/pids.max\ncat /sys/fs/cgroup/pids/user.slice/user-*.slice/pids.current\n\nЕсли интересно, что это такое — гуглить «linux cgroup slices»:\n\nЧто будет в системных логах, если TaskMax недостаточен:\n2020-01-01T03:23:30.674392+03:00 serv kernel: [5145583.466931] cgroup: fork rejected by pids controller in /user.slice/user-*.slice/session-2247619.scope\n\nКстати\n\n/etc/sysctl.conf\nfs.file-max = 6815744\n\nТут тоже особо не заостряю внимания.\n\nСеть, sysctl, net.core, net.iipv4\n\nЧтобы что-то тут менять — надо очень хорошо понимать, как работает сеть, ядро, сокеты. Бездумное изменение параметров может сделать только хуже. Не буду здесь приводить конкретных настроек, так как у меня до сих пор фрагментированное понимание этой части sysctl. Хотелось бы, чтобы гайды о сетевой части sysctl сопровождали примерами из netstat -sn и netstat -an.\n\nКейсы по архитектурным ошибкам\n\nВсё, что я напишу ниже, следует читать осторожно, сознавая что обычный разработчик, который работает с Informatica каждый день, может обладать куда большей экспертизой, чем я.\n\n1. GRID\n\nИнформатика может иметь все сервисы на одной машине, а может существовать в виде кластера и балансировать нагрузку между нодами. Даже если вы в ближайшем будущем не планируете использовать кластер, всё же крайне желательно, чтобы разработка велась так, как будто это может произойти в будущем. Вертикальная масштабируемость конечна, сидеть на ней без возможности в любой момент переключиться на горизонтальную — это как сидеть на пороховой бочке.\n\nЯ не имел личного опыта работы с гридом, но много людей отзывались о нём негативно. Грид определённо не только решает проблемы, но и добавляет новые. Тем не менее, я знаю организации, у которых всё работает именно на гриде. Надеюсь, у меня будет возможность познакомиться с ним поближе и набить уже своих шишек.\n\nОчень наглядный гайд по созданию грида видел у nutanix.\n\n2. Pushdown\n\nК разработке может быть несколько подходов:\n\nВсю работу по части ETL выполнять на стороне информатики, постоянно подтягивая в неё данные.\nВсю работу по части ETL выполнять на стороне СУБД приёмника/таргета, использовать дблинки.\n\nВторой вариант и есть так называемый pushdown optimization. Тут сразу уточню, что у информатики есть свои крутые механизмы для pushdown optimization, которые позволяют, например, переносить логику трансформации на source/target — но я говорил не про эти механизмы, а про общие принципы.\n\nВедь как правило незачем тягать данные на сервер информатики и нагружать его, если source & target находятся в пределах одной БД — лучше сделать процедуру.\n\nНа Хабре выходила отличная статья от DIS, где они рассказывали про pushdown на русском, рекомендую к прочтению.\n\n3. Информатика как шедулер\n\nБольшинство компаний используют информатику в качестве эдакого шедулера для запуска потоков и не перекладывают на неё вычисления, если это можно сделать на стороне БД. И во всех организациях присутствует дополнительная сущность в виде базы данных, которая используется в качестве управляющего механизма. Это очень удобно для выстраивания логики работы потоков и параметров их запуска (нам же нужно знать, например, какие даты мы уже успешно загрузили, успешно ли отработали потоки и т.д).\n\nВ итоге в информатике выстраивается сложная схема, когда один поток запускает десятки других потоков, в это время второй поток дожидается выполнения третьего и пятого потока, а многие-многие сессии запускают sh-файлы, которые взаимодействуют с управляющим механизмом. В некоторых потоках может быть и 1500+ запусков sh-файлов (и до 200-300 запусков одновременно).\n\nНа этапе использования sh-файла для обращения к управляющему механизму в некоторых компаниях может закладываться бомба замедленного действия, т.к в одном таком файле может быть до 4 соединений посредством sqlplus (пример работы: проверили, включен ли поток; взяли параметры запуска; записали, что поток отработал и.т.д). И это довольно неплохой способ устроить своеобразную DDoS-атаку штормом коннектов на сервер БД.\n\nКак минимум поэтому сервер БД метаданных информатики и сервер БД управляющего механизма не должны быть в опасной близости друг от друга. И конечно, бест практик не размещать сервер БД, хранящий метаданные информатики, на одной площадке*.\n\n*На самом деле, не так уж это и критично. Но по возможности лучше этого избегать. Я видел примеры с высоконагруженными серверами информатики, где сервера БД были на этом же хосте.",
    "status": "AP"
  },
  {
    "title": "Automotive, трансформируемся",
    "slug": "automotive",
    "category": "Разработка",
    "tags": [
      "Информационная безопасность",
      "Сетевое оборудование",
      "Контекcтная реклама"
    ],
    "poster": "posters/automotive.jpeg",
    "author": "kate",
    "short_desc": "Automotive – одно тех направлений, где мечтает хоть раз поработать большинство разработчиков. В России над технологическими решениями для транспортных средств в практике Luxoft трудятся более 300 человек. В чём особенности этого направления, над чем работают разработчики Automotive и какие технологии привносит в вашу жизнь это направление, даже если вы не водитель, расскажет Александра Власова, наш Senior Project Manager.\n\n",
    "text": "C чем у нас ассоциируются автомобили в обычной жизни? Чаще всего это пробки и необходимость ТО. Но если подумать о чем-то менее бытовом — о том, что смогут делать автомобили в будущем и что смогут дать будущим пользователям, то рисуются удивительные перспективы: \n\nбеспилотные автомобили\n\n«умные» города без пробок\n\nудалённая диагностика технического состояния машины\n\nдополненная реальность с проекцией сообщений на стекло водителя\n\nуправление жестами. Это 5 уровней автономности – принятая градация для измерения автоматизации, которая обеспечивает беспилотное вождение. На данный момент большая часть автомобилей находится на втором уровне, но лидеры рынка уже сейчас стремятся попасть на 3+, где уже можно наблюдать за тем, что самостоятельно может делать твой автомобиль. Произойдет это примерно через 3-4 года. Кто сможет сделать это первым, тот и выиграет рынок. \n\nЧто меня вдохновляет в Automotive\nВо-первых, интересно, кто выиграет эту гонку технологий и выйдет на третий уровень автономности первым. Это индустрия высокой конкуренции, и мне нравится уровень задач, которые предстоит решать. Это и про сложность разрабатываемых систем, и про ответственность менеджмента. Во-вторых, я понимаю, что мой проект – реальный результат моей работы, ездит по дорогам, его можно потрогать руками, и это не что-то далекое и абстрактное. \n\nА еще в Automotive можно найти все mainstream направления: ML, IoT, Cloud, big data, блокчейн, 3D-движки, 5G. Популярным становится Golang, никуда не ушли С/C++ для разработки внутренних систем автомобиля и Java, Python, которые поддерживают инфраструктуру разработки и тестирования. \n\nОсобенности индустрии для IT\nЧем Automotive сейчас интересен техническим специалистам? \n\nСложность систем. Сложность кода и системы автомобиля в целом становятся настоящим челенджем для любого разработчика, тестировщика и любого технического специалиста, который имеет отношение к коду. Самое главное, что тут стоит знать — у «автомобильного» кода просто очень много строк. Немного статистики. Боевой самолет – это 30 млн. строк кода, Boeing 787 содержит 6,5 млн. кода для управляющих систем, а Мерседес  S-класса – 100 млн. строк кода. Впечатляет, не правда ли? ",
    "status": "AP"
  },
  {
    "title": "Что такое SASE и зачем это нужно?",
    "slug": "SASE",
    "category": "Администрирование",
    "tags": [
      "Контекcтная реклама",
      "Управление проектами",
      "Веб-дизайн"
    ],
    "poster": "posters/sase.svg",
    "author": "john",
    "short_desc": "В последнее время активно набирает обороты SASE — это один из восходящих трендов в сетевой отрасли. Что это такое? Если кратко, то это технологическая корпоративная стратегия, которая объединяет функции сети и безопасности с возможностями глобальной сети. Зачем? Для того, чтобы обеспечить потребности сетевого доступа современных организаций, причем доступ должен быть одновременно надежным и безопасным.",
    "text": "В целом, можно сказать, что SASE — своего рода объединение возможностей SD-WAN и служб сетевой безопасности, включая брандмауэр следующего поколения (NGFW), безопасный веб-шлюз (SWG), сетевой доступ к сети с нулевым доверием (ZTNA) и посреднические службы облачной безопасности (CASB), в единую модель обслуживания. Это если кратко, подробности — под катом.\n\nКому и зачем это нужно?\n\nВ общем-то, ответ остается неизменным — SASE, в первую очередь, нужна для компаний, преимущественно средних и крупных. Им всегда нужен надежный и главное, непрерывный доступ к облачным ресурсам и данным, которые находятся в «облаках». Вся эта информация критически важна для бизнеса, поэтому проблемы не допускаются.\n\nК сожалению, большинство современных решений для обеспечения безопасности не способны обеспечить необходимый уровень скорости, производительности, безопасности и контроля доступа, которые нужны организациям и их пользователям. Можно сказать, что SASE — качественный, а не количественный этап развития сетевых технологий и бизнес-стратегий, которые на них базируются.\n\nСам термин SASE появился только в 2019 году — его автором можно считать компанию Gartner, которая употребила термин в своем отчете «Будущее сетевой безопасности в облаке». Эксперты агентства в этом ответе указали, что SASE — одна из важнейших тенденций рынка. В частности, об этом говорится в разделе «Требования клиентов к простоте, масштабируемости, гибкости, низкой задержке и постоянной конвергенции сетевой безопасности WAN и рынков сетевой безопасности».\n\nВ отчете дается следующее определение стратегии: «SASE объединяет функции сетевой безопасности (такие как SWG, CASB, FWaaS и ZTNA) с возможностями WAN (т.е. SD-WAN) для обеспечения потребности организаций в динамическом безопасном доступе к ИТ-ресурсам. Эти возможности предоставляются в основном в виде -aaS и основаны на определении учетных записей, актуального контекста и политик безопасности и регуляторного соответствия. По сути, SASE — это новый пакет технологий, включающий SD-WAN, SWG, CASB, ZTNA и FWaaS в качестве основных возможностей, обладающий способностью идентифицировать конфиденциальные данные или вредоносное ПО, а также способностью дешифровать контент на линейной скорости, с непрерывным мониторингом сессий на предмет адекватного уровня риска и доверия\".\n\nОсобенности SASE\n\nГлавным отличием SASE от других технологических стратегий является размещение механизмов управления безопасностью сети на периметре — в пограничной с облаком зоне. В большинстве традиционных моделей управление безопасностью осуществляется централизованно. В итоге SASE ликвидирует необходимость в сервисах, которые нуждаются в индивидуальной конфигурации и управлении. Вместо этого SASE предоставляет стандартизированный набор сетевых сервисов и сервисов безопасности, которые позволяют создать надежную и эффективную сетевую архитектуру в зоне объединения сети и облака.\n\nКомпоненты стратегии SASE\n\nПростой стратегию назвать нельзя, она включает несколько компонентов. Но цель всего этого — обеспечение безопасного корпоративного доступа к ресурсам.",
    "status": "AP"
  },
  {
    "title": "Возможно ли сделать ЦОД эффективнее и экономичнее одновременно?",
    "slug": "cod",
    "category": "Администрирование",
    "tags": [
      "Веб-дизайн",
      "Программирование",
      "Хранение данных"
    ],
    "poster": "posters/cod.jpeg",
    "author": "alex",
    "short_desc": "С начала массового строительства центров обработки данных минуло 25 лет, а рынок очень далек от насыщения — ежегодно мировые вложения в строительство дата-центров растут на 15%. При этом ЦОДы становятся всё более мощными и дорогими. Стоимость строительства и эксплуатации напрямую влияет на цену цифровых услуг, например, хостинга, облачных хранилищ и вычислений, поэтому все заинтересованы в повышении эффективности и экономичности дата-центров во всём мире.",
    "text": "Высокие технологии с высоким энергопотреблением\n\nПо оценкам журнала Nature, в год на снабжение дата-центров во всём мире уходит порядка 200 ТВт·ч, причем 140 ТВт·ч приходится на ЦОДы США. Еще шесть лет назад дата-центры потребляли только 91 ТВт·ч, то есть рост составил внушительные 220% Сейчас ЦОДы потребляют больше, чем вся Украина (122 ТВт·ч), Аргентина (129 ТВт·ч), Швеция (134 ТВт·ч) или Польша (150 ТВт·ч).\n\nНесмотря на то, что дата-центры — это не дымящие трубы и вредные отходы, а облачные вычисления, они тоже оставляют серьезный углеродный след в мировой экологии — примерно 0,3% от общемировых выбросов, что немало. Всё потому, что доля «зеленой» энергетики в главных странах-держателях ЦОДов очень мала (11% в США, 26% в Китае, всё с учетом гидроэлектростанций), поэтому на электроснабжение дата-центров работают газовые и угольные электростанции. В итоге экологи и европейские правительства недовольны ростом выбросов парниковых газов, операторы электросетей недовольны растущей нагрузкой и необходимостью модернизировать сети, владельцы ЦОДов недовольны затратами на обслуживание.\n\nГлавная после операционных расходов статья содержания дата-центра — электричество, на которое может прийтись до половины расходов. Для оценки энергоэффективности ЦОДов применяется коэффициент PUE (Power usage effectiveness — «эффективность использования энергии»), выражающий отношение всего потребляемого электричества к потреблению ИТ-оборудования. PUE, равный 1,0, идеален и недостижим, к нему можно только стремиться, так как к серверам непременно прилагаются системы охлаждения и мониторинга, тоже требующие электропитания. На охлаждение может приходится 50-80% от потребления ИТ-оборудования, а то и больше, поэтому средний PUE в мире сейчас составляет 1,67 (1 единица энергии уходит серверам и 0,67 единицы — другому оборудованию). Благодаря комплексному подходу в лучших случаях PUE можно снизить до 1,05–1,10, а это выливается в колоссальную экономию на электроснабжении.\n\nВот только чтобы добиться такой экономии, придется выполнить почти все рекомендации из нашего чеклиста. Начнем от простого к сложному: сначала опишем меры апгрейда текущего оборудования, потом замахнемся на реорганизацию ЦОДа, а затем помечтаем о переносе или строительстве новых дата-центров с учетом последних тенденций и самых современных технологий.Обновление ИБП для минимизации потерь\n\nДля обеспечения резервирования электропитания, а также для защиты дорогостоящего оборудования дата-центров от скачков напряжения и других проблем питающей электросети применяются онлайн-ИБП с нулевым временем переключения на батарею. За бессбойную работу серверов приходится платить повышенным энергопотреблением — при двойном преобразовании напряжения в целях повышения его характеристик неизбежны потери, которые тоже приходится оплачивать. КПД ИБП напрямую зависит от нагрузки — чем она выше (в рамках характеристик ИБП), тем больше коэффициент полезного действия. КПД актуальных онлайн-ИБП в режиме двойного преобразовния при высокой нагрузке может составлять 85-95%, а сильно устаревших моделей — пугающие 40-50%. То есть от 15% до 50% электроэнергии исчезают в ходе преобразования, но не исчезают из суммы затрат. Для старых ИБП особенно остро стоит проблема низкого КПД при невысокой загрузке.\n\nСамые современные специализированные онлайн-ИБП могут достигать КПД до 99% при штатной работе. Вот поэтому обновление парка ИБП может круто снизить затраты на обслуживание ЦОДа и заметно повысить PUE. Пример — ИБП от Eaton, недавно попались на глаза. Для маленьких ЦОДов — компактные Eaton 9SX/9PX на 5/6/8/11 кВ·А (серия 9PX оснащена портом DB15 для организации параллельной работы двух ИБП). Эти ИБП имеют КПД до 98% в «высокоэффективном» режиме работы и до 95% при двойном преобразовании. Каждый модуль полностью автономен и может устанавливаться как вертикально, так и в 19-дюймовую стойку. Для снижения затрат на обслуживание батареи в 9SX/9PX используется технология управления зарядом Eaton ABM, которая увеличивает срок службы аккумуляторов на 50%. Вместо постоянной подзарядки малым током ABM следит за уровнем заряда и подзаряжает батареи только тогда, когда это нужно.\n\nА вот для современных больших ЦОД, владельцы которых больше заинтересованы в бесперебойной работе оборудования, чем в экономии каждого рубля, лучше обратить внимание на башенные ИБП Power Xpert 9395P. В режиме сохранения энергии ESS они обладают КПД 99%. Топовая модель серии 9395Pрассчитана на 1200 кВ·А.\n\nОбновляем распределители питания\n\nТакая, казалось бы, банальная вещь, как распределители питания (PDU, или Power distribution unit), тоже могут быть причиной повышенного расхода электроэнергии. Предназначение и функциональность PDU просты — контроль напряжения и его подведение к оборудованию. Хотя на этапе планирования ЦОД велик соблазн отдать предпочтение дешевым розеточным блокам без возможности удаленного управления, возможные перегрузки фазы могут привести к отключению электроснабжения, и тут даже ИБП не помогут.\n\nА еще дешевые PDU имеют невысокий КПД. Современные дорогие интеллектуальные модели поставляются с добротным трансформатором, отвечающим высоким требованиям стандарта энергоэффективности TP-1. Сертификация TP1 подразумевает повышение КПД PDU примерно на 2-3% относительно обычных моделей, что вроде бы немного, но при пересчете на годовые затраты выливается в приятную экономию. Помимо этого, современные PDU упрощают кабель-менеджмент, помогают уменьшить количество проводов и тем самым улучшить обдув компонентов. Да, PDU с сертификатом TP-1 закономерно дороги, но затраты на них отбиваются примерно за 6 лет, тогда как срок службы таких PDU составляет не менее 20 лет.",
    "status": "AP"
  },
  {
    "title": "Настройка резервного копирования на внешний HDD, используя Bareos, для Windows 10",
    "slug": "hdd",
    "category": "Администрирование",
    "tags": [
      "Хранение данных",
      "Обработка изображений",
      "Высокая производительность"
    ],
    "poster": "posters/bareos.png",
    "author": "kate",
    "short_desc": "До недавнего беспокойного времени для создания резервных копий критичных данных я использовал стандартное средство операционной системы Windows 10 - \"История файлов\" (\"File history\"). Периодически данные со стационарного ПК сохранялись на внешний HDD, подключаемый через USB интерфейс, что меня вполне устраивало и успокаивало мою психику.",
    "text": "Одним субботним утром меня озадачил вопрос: \"А смогу ли я восстановить свои данные на другой системе?\" В качестве испытуемого был выбран ноутбук с системой Windows 10. После большой небольшой пляски с бубном данные были восстановлены, но неприятным сюрпризом стало то, что при сравнении количества папок и файлов было обнаружено расхождение. Данный факт меня опечалил и побудил подойти к вопросу организации резервного копирования данных более ответственно. После непродолжительного поиска в сети Internet мой выбор пал на Open Source систему Bareos. Процесс настройки системы не был для меня простым и интуитивным, было затрачено значительное количество времени. Память человеческая имеет прекрасную способность забывать информацию, что побудило меня составить \"шпаргалку\" на будущее, коей спешу с Вами поделиться.\n\nОписание задачи\nНа стационарном ПК с ОС Windows 10 x64 на локальном диске DATA (D:) расположен каталог проекта \"test\". Необходимо организовать резервное копирование всех файлов вышеуказанного проекта на внешний HDD - BACKUP (E:), за исключением подкаталогов \"target\".\n\nРазработка проекта ведётся в будние дни, поэтому копирование производить в автоматическом режиме по графику:\n\nполное - по пятницам в 18:30;\n\nинкрементальное - с понедельника по четверг в 18:30.На компьютере на локальном диске C: установлена система Bareos версии 19.2.7 x64. Установка произведена \"по умолчанию\" (со всем соглашаемся и нажимаем \"далее\"), тип установки \"Full SQLite\".Активация задания копирования\nПерезапустим службы Bareos, чтобы применить внесённые нами изменения:\n\nBareos Storage Service (\"Bareos-sd\");\n\nBareos Director Service (\"Bareos-dir\").\n\nПосле этого наше задание \"backupTest\" активировано, проверим это. Зайдём в панель управления Bareos по адресу http://127.0.0.1:9100/ (логин: admin, пароль: admin). Перейдём в раздел \"Расписание\" (\"Schedules\") на вкладку \"Статус планировщика\" (\"Status schedules\") и убедимся, что наше задание присутствует в расписании.Запуск восстановления данных\nПерейдем в раздел \"Восстановление\" (\"Restore\") на вкладку \"Восстановить на клиент\" (\"Restore multiple files\"). В поле \"Клиент\" (\"Client\") выберем значение \"bareos-fd\". В поле \"Задания резервного копирования \" (\"Backup jobs\") выберем желаемую точку восстановления. В поле \"Объединить все наборы файлов клиента\" (\"Merge all clients filesets\") выберем значение \"Нет\" (\"No\"). В поле \"Папка восстановления на клиенте\" (\"Restore location on client\") укажем куда восстановить данные (\"D:/test_restore\") и запустим восстановление, нажав \"Restore\".",
    "status": "AP"
  },
  {
    "title": "Я не хочу думать",
    "slug": "think",
    "category": "Дизайн",
    "tags": [
      "Высокая производительность",
      "Информационная безопасность",
      "Сетевое оборудование"
    ],
    "poster": "posters/think.jpg",
    "author": "john",
    "short_desc": "Базовые принципы из психологии, которые помогут улучшить взаимодействие пользователя c контентом на примере e-learning продуктов.",
    "text": "В IT-сфере существует огромное количество различных продуктов. И многие разработчики в своей работе сталкивался с главной проблемой — пользователь не использует ресурс так, как задумано.\n\nКазалось бы, продукт отполирован, отработан, каждая деталь работает с точностью до пикселя. Но, попав в руки к пользователю, вся проделанная работа становится игрушкой в руках ребенка. Он нажимает не те кнопки, ссылки не видит и не хочет вчитываться в инструкции.\n\nПользователь не виноват. Он не знает, как создавался продукт. Он использует его, основываясь на своем опыте и знаниях.\n\nКаждый человек индивидуален, но можно выделить общие принципы из психологии. Эти принципы помогут улучшить взаимодействие человека с контентом независимо от того, какой продукт предстоит разработать. Рассмотрим некоторые из них.\n\nОчевидность\n«Как правило, людям не нравится раздумывать над тем, как делать что-либо», — Стив Круг, юзабилити-консультант.\n\nСуществует понятие когнитивной нагрузки. Это объем умственной работы, необходимый для решения задачи. И чем меньше этот объем — тем увереннее пользователь будет чувствовать себя при использовании продукта. Все страницы, слайды, экраны продукта должны быть ясными, не требующими объяснений. Чтобы человек, который едва знает, как открыть браузер, сразу понял, о чем идет речь.\n\nНеуместные головоломки только усложняют жизнь людям, увеличивают нагрузку на мозг и отвлекают от основной задачи. Чем яснее будут названия страниц, чем понятнее будет «кликабельность» кнопок и ссылок, чем очевиднее будет путь до нужной точки — тем легче и приятнее пользователю будет использовать продукт. Делайте кликабельные элементы «кликабельными» визуально. Кнопка должна выглядеть как кнопка, ссылка — как ссылка.\n\nНапример, цветовое выделение должно быть только у кликабельного элемента. Если заголовки и ссылки будут выделены одним цветом — это может сбить с толку пользователя",
    "status": "AP"
  },
  {
    "title": "Ущерб от баннерной рекламы",
    "slug": "advert",
    "category": "Дизайн",
    "tags": [
      "Сетевое оборудование",
      "Контекcтная реклама",
      "Управление проектами"
    ],
    "poster": "posters/banner.jpeg",
    "author": "alex",
    "short_desc": "Очевидно, баннерная реклама раздражает пользователей. Но насколько сильно? Возможно, она настолько всех бесит, что доход от рекламы не стоит потерь в трафике. А возможно, и нет. Если коротко, то даже единственный небольшой баннер снижает трафик примерно на 10%. Подробный анализ — под катом.",
    "text": "Что мне особенно нравится в gwern.net, особенно по сравнению с остальным Интернетом, — так это скорость загрузки и отрисовки страницы. Поэтому в моих прежних A/B-тестах я в основном проверял всякие изменения в CSS, не влияющие на скорость работы. А что на неё влияет? Как выяснилось, тормозят преимущественно Google AdSense (над заголовком раньше висел баннер средних размеров) и комментарии Disqus.\n\nКомментарии я удалять не хочу. Заменить Disqus тоже особо не на что: хоть мне и не нравится тот объём некешируемого JS, который он подтягивает, я не знаю другой системы для комментов с нормальным антиспамом и сравнимым числом пользователей. К тому же он нормально работал пять с лишним лет, так что не вижу большой необходимости что-то менять.\n\nА вот AdSense — другое дело. Я им пользуюсь только потому, что он приносит мне немного денег (~30$ в месяц, ~360$ в год; могло бы быть больше, но примерно 60% моих читателей пользуются AdBlock). Так что поэкспериментировать с рекламой будет довольно интересно: это и один из самых тяжеловесных элементов страницы, и повод поиграться с теорией принятия решений (посчитать пороги и EVSI), и приложение для Байесовского анализа временных серий в JAGS/Stan, и вообще проверка того, насколько A/B-тесты хороши для таких серьёзных вопросов.\n\nЭффекты рекламы: глобальные и локальные\nПрежде всего, доход от рекламы довольно невелик — значительно меньше, чем мне приносит Patreon. Если я теряю, скажем, 10% трафика и влияния из-за лагов или раздражающего баннера, то тридцать баксов в месяц явно того не стоят.\n\nКлассические A/B-тесты с разделением пользователей на подгруппы часто критикуют за то, что они не позволяют увидеть лес за деревьями и дают абсолютно точный ответ на бесполезный вопрос. Да, изменение увеличивает рассматриваемые метрики типа времени на странице или числа кликов, но не причиняет ли оно сайту или сообществу вред, заметный только в макромасштабе? Не получится ли так, что ущерб от каждого конкретного изменения будет копеечным или вообще статистически незначимым, но все вместе они превратят сайт не пойми во что?\n\nПоэтому в качестве метрики я буду использовать общий суточный трафик. Он описывает скорее привлекательность сайта в целом, чем качество конкретной страницы, и зависит в том числе и от того, сколько ссылок на мой сайт было выложено в данный день в социальных сетях. Известно, что для A/B-тестирования в контексте социальных сетей нельзя просто показать половине пользователей одну версию страницы, a второй половине — другую. Поскольку люди в социальных сетях взаимодействуют друг с другом, их активность не является независимой и не подлежит простому статистическому анализу типа t-тестов. Надо сперва выделять крупные группы пользователей (например, связные подграфы), которые будут приблизительно независимыми друг от друга, и гонять тесты уже на них. Поскольку я не могу выделять такие группы среди посетителей сайта, остаётся менять версии каждый день (или неделю) и смотреть, как это повлияет на трафик.\n\nМенять страницы вручную, конечно, не хочется. Даже не столько потому, что это мартышкин труд — кеширование может привести к тому, что исследуемые группы пользователей перемешаются. Так что временной A/B-тест делается вот как: перед вызовом AdSense JS надо вставить какое-нибудь условие типа “если номер дня в году (1-366) mod 2 равно нулю, то не показывать рекламу”, а через несколько месяцев вытащить трафик за каждый день из Google Analytics. Так как логика тестирования находится на клиенте, кеширование ни на что не влияет. Использование JS тоже не проблема, так как люди с отключенным JavaScript в любом случае не видят рекламу. Ну и поскольку распространение ссылок в социальных сетях — дело достаточно медленное, то нужно менять сайт не раз в сутки, а раз в пару дней.",
    "status": "AP"
  },
  {
    "title": "Они рисуют дыры в бюджете. Что не так с вашими дизайнерами?",
    "slug": "budget",
    "category": "Дизайн",
    "tags": [
      "Управление проектами",
      "Веб-дизайн",
      "Программирование"
    ],
    "poster": "posters/budget.png",
    "author": "kate",
    "short_desc": "Тонкие творческие натуры проделывают дыры в ваших карманах. Их безобразный дизайн порождает технический долг, сжигающий ваши деньги. Остается лишь надежда, что в свете от этого грандиозного пожара вы увидите свои ошибки. Это обращение не к фронтендерам или дизайнерам, а к тем, кто может изменить положение дел, нам нужна помощь. Самый страшный грех веб-дизайнера под катом.",
    "text": "Известно, что веб-дизайн — это не живопись, тут другие правила, это не та игра. Важно крепкое аналитическое мышление и здравый смысл, иногда немного математики, а композиция здесь работает иначе. Но кому это известно? Знают ли дизайнеры и что найдется в их портфолио?\nМодные шрифты и пара оттенков продающего зеленого, немного уверенного синего, около трех тысяч состояний буквы \"А\". Вот это — первое — когда пользователь на букву смотрит, это, когда не смотрит, а это, когда пользователь немного отвлекся или в комнату вошел кот.\nВ общем, все те важные вещи, без которых реализация графического интерфейса не представляется возможной, да? Нет. Но цепляет, ведь это то, за что берут на работу. В худшем случае вы даже решите, что одиннадцать по-разному стилизованных селектов в одном UI-ките – это крайне продуманное решение.\n\n\nРисование дыр в бюджете\n\nПо секрету, хороший дизайн важнее, чем хороший фронтенд-разработчик. Хороший разработчик просто будет знать, где понатыкал костылей, в то время как посредственный даже не поймет это. Сомнительный плюс, но плюс. А вот с плохим дизайном вам не поможет и лучший из лучших. Сейчас буду угадывать, как у вас обстоят дела в проекте, точность 100% не гарантирую, но буду близок. Костыль за костылем, UI построенный на компромиссах, переработках, сорванных сроках и, конечно, все это приправлено пеплом ваших денег.\n\n\nВ точку! А как же так? Дело в том, что, похоже, никто не в состоянии оценить работу дизайнера.\nРазработчики же могут?. Да, зачастую дизайны и правда плохие! Но почему? Дело в том, что разработка интерфейсов в 2021 году – штука довольно непростая. Сложность отчасти была решена компонентным подходом в проектировании и построении систем. Перед дизайнерами встала задача разбить свою систему на компоненты. Они справились отвратительно. Подавляющее большинство записывает в ответ 2 + 2 вместо 4. Что это значит? А значит это, что код клиентской части приложения становится непреодолимой полосой препятствий еще до написания первой строчки.\n\n\nГлавный, первый и непреложный закон компонентного подхода (похоже, что таким его никто не считает) – компоненты должны быть согласованы. Но так как о его существовании либо не знают, либо игнорируют, то увы. До последней купюры будет ярко гореть ваш проект и вот почему.\n\nКак выглядит крах?\n\nУ дизайнера есть всего одна возможность все запороть, одна единственная ошибка,\nкоторую не поправить без потерь в качестве кода. Качество кода — это ваши деньги, поверьте мне на слово. С каждым новым костылем моя работа обходится вам дороже. Не верите? Правильно, и дизайнерам не верьте.\n\n\nЕсли не любите аналогии, а я не мастер этого дела, просто двигайтесь дальше\nС каждым новым костылем стоимость разработки увеличивается. Ваши менеджеры от вас это скрывают, многие из них не понимают ни того, что происходит в разработке, ни того, что от них хотят заказчики, но это явно другая тема. Так вот, эту ошибку допускали все дизайнеры, которых я встречал, с кем работал, с кем говорил. Ходят слухи, что есть Другие, верю и хочу с ними поработать.\n\n\nНесогласованные компоненты – это как бракованный пазл, где шипы (выступы элементов пазла) не подходят к пазам (выемкам элементов), они то больше, то меньше, то вовсе отсутствуют. Что делать… картинка нужна и она будет собрана, но только раз, понадобятся ножницы, клей и неограниченный запас нервных клеток.\n\n\nКогда потребуется что-то изменить, не сомневайтесь – системы эволюционируют, а правильные решения в моменте могут оказаться плохими в ретроспективе, это нормально – изменения займут много времени. Напомню, что за мое время платит бизнес.\n\n\nБракованные системы и безумства разработчиков\n\nВот вы дизайнер и у вас есть несколько атомарных компонентов, они эталонны, они прекрасны, а вы — гений. Пора отдать их разработчикам, они будут в восторге, а пользователя покорит ваша гениальность.",
    "status": "AP"
  }
]